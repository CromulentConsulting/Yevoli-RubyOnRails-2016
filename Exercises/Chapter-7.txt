1. Visit /about in your browser and use the debug information to determine the controller and action of the params hash.
The controller is, static_pages:

The action is, about


2. In the Rails console, pull the first user out of the database and assign it to the variable user. What is the output of puts user.attributes.to_yaml? Compare this to using the y method via y user.attributes.
puts user.attributes.to_yaml
---
id: 1
name: John Yevoli
email: john.yevoli@gmail.com
created_at: !ruby/object:ActiveSupport::TimeWithZone
  utc: &1 2016-08-29 19:42:35.988519000 Z
  zone: !ruby/object:ActiveSupport::TimeZone
    name: Etc/UTC
  time: *1
updated_at: !ruby/object:ActiveSupport::TimeWithZone
  utc: &2 2016-08-29 19:42:35.988519000 Z
  zone: !ruby/object:ActiveSupport::TimeZone
    name: Etc/UTC
  time: *2
password_digest: 
 => nil 


y user.attributes
---
id: 1
name: John Yevoli
email: john.yevoli@gmail.com
created_at: !ruby/object:ActiveSupport::TimeWithZone
  utc: &1 2016-08-29 19:42:35.988519000 Z
  zone: !ruby/object:ActiveSupport::TimeZone
    name: Etc/UTC
  time: *1
updated_at: !ruby/object:ActiveSupport::TimeWithZone
  utc: &2 2016-08-29 19:42:35.988519000 Z
  zone: !ruby/object:ActiveSupport::TimeZone
    name: Etc/UTC
  time: *2
password_digest: 
 => nil 


y seems to be a shortcut to yaml?



1. Associate a Gravatar with your primary email address if you haven’t already. What is the MD5 hash associated with the image?
email = "joe.yevoli@gmail.com"
 => "joe.yevoli@gmail.com" 
2.2.3 :008 > Digest::MD5::hexdigest(email.downcase)
 => "0b26ff311d76dba0619cfe34875a7f65"


2. Verify that the code in Listing 7.12 allows the gravatar_for helper defined in Section 7.1.4 to take an optional size parameter, allowing code like gravatar_for user, size: 50 in the view. (We’ll put this improved helper to use in Section 10.3.1.)
Verified.


3. The options hash used in the previous exercise is still commonly used, but as of Ruby 2.0 we can use keyword arguments instead. Confirm that the code in Listing 7.13 can be used in place of Listing 7.12. What are the diffs between the two?
Verified.




1. In Listing 7.15, replace :name with :nome. What error message do you get as a result?
undefined method `nome' for #<User:0x007fb7bb2119f0>



2. Confirm by replacing all occurrences of f with foobar that the name of the block variable is irrelevant as far as the result is concerned. Why might foobar nevertheless be a bad choice?
Confirmed.  See app/views/users/show.html.erb 


1. Confirm by changing the minimum length of passwords to 5 that the error message updates automatically as well.
Confirmed.


2. How does the URL on the unsubmitted signup form (Figure 7.12) compare to the URL for a submitted signup form (Figure 7.18)? Why don’t they match?
Because we're using the users resource to do routing.  The reason why the user goes to /signup after they click the Sign up button is because
we've explicitly told the route file to GET /signup.  In order for this to work properly we need to create a POST request to Users#create.


1. Using the Rails console, verify that a user is in fact created when submitting valid information.
User.create(name: "Phil", email: "phil.sarin@gmail.com", password: "foobar", password_confirmation: "foobar")
   (0.1ms)  begin transaction
  User Exists (0.3ms)  SELECT  1 AS one FROM "users" WHERE LOWER("users"."email") = LOWER(?) LIMIT ?  [["email", "phil.sarin@gmail.com"], ["LIMIT", 1]]
  SQL (2.7ms)  INSERT INTO "users" ("name", "email", "created_at", "updated_at", "password_digest") VALUES (?, ?, ?, ?, ?)  [["name", "Phil"], ["email", "phil.sarin@gmail.com"], ["created_at", 2016-09-06 20:00:02 UTC], ["updated_at", 2016-09-06 20:00:02 UTC], ["password_digest", "$2a$10$2Gj5mdPyZGE24X01kt1eNOzfdHFSN3GstR3rqJ8I1NMVKKzeeDC4a"]]
   (0.9ms)  commit transaction
 => #<User id: 3, name: "Phil", email: "phil.sarin@gmail.com", created_at: "2016-09-06 20:00:02", updated_at: "2016-09-06 20:00:02", password_digest: "$2a$10$2Gj5mdPyZGE24X01kt1eNOzfdHFSN3GstR3rqJ8I1NM..."> 




2. Confirm by updating Listing 7.28 and submitting a valid user that redirect_to user_url(@user) has the same effect as redirect_to @user.
Confirmed.



1. In the console, confirm that you can use interpolation (Section 4.2.2) to interpolate a raw symbol. For example, what is the return value of "#{:success}"?
"#{:success}"
 => "success" 




2. How does the previous exercise relate to the flash iteration shown in Listing 7.30?
:success is a symbol but embedded ruby automatically converts it to a string before inserting into a template.


1. Using the Rails console, find by the email address to double-check that the new user was actually created. The result should look something like Listing 7.32.
User.find_by(email: "example@railstutorial.org")
  User Load (0.2ms)  SELECT  "users".* FROM "users" WHERE "users"."email" = ? LIMIT ?  [["email", "example@railstutorial.org"], ["LIMIT", 1]]
 => #<User id: 1, name: "Rails Tutorial", email: "example@railstutorial.org", created_at: "2016-09-07 21:00:09", updated_at: "2016-09-07 21:00:09", password_digest: "$2a$10$HVQvB0vTlLs49PbQWu5V8uxLKPwn.rFccvGxRW6TVb5..."> 
2.2.3 :003 > 


2. Create a new user with your primary email address. Verify that the Gravatar correctly appears.
Confirmed.
